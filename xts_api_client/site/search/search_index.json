{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<ul> <li>This package is written to be used as a XTS API Client in Python.</li> <li>With the correct API credentials, User can access XTS interactive &amp; market data.</li> </ul>"},{"location":"#local-server-installation-recommended","title":"Local Server Installation (recommended)","text":"<ul> <li>Use uv packages manager to install the package. Example of the command is shown below. (recommended)</li> </ul> <p>Step 1. </p> <pre><code>uv add --frozen http://pypi.rmoneyindia.in:8080/xts_api_client-1.0.2-py3-none-any.whl\n</code></pre> <p>Step 2.</p> <pre><code>uv sync\n</code></pre>"},{"location":"#use-pip-to-install-the-package-not-recommended","title":"Use PIP to install the package. (not recommended)","text":"<pre><code>pip install http://pypi.rmoneyindia.in:8080/xts_api_client-1.0.2-py3-none-any.whl\n</code></pre>"},{"location":"#local-installation","title":"Local Installation","text":"<ul> <li>To install the package locally, download the complete zip of the package.</li> <li>As per user discretion, use virtual envirnment or uv package manager. Activate the envirnment. This is an optional step .</li> <li>Navigate the PowerShell/Command prompt to the directory (xts_api_client\\dist) where xts_api_client-0.1.0-py3-none-any.whl file exists.</li> <li>Use \"pip install xts_api_client-0.1.0-py3-none-any.whl\"</li> <li>Use \"pip list\" or \"uv pip list\" to verify the installation.</li> </ul>"},{"location":"#pip-installuv-add","title":"Pip install/uv add","text":"<p>Currently, the package is not been hosted on the Python Package Index. So other workarounds are mentioned here to make use of the package.</p>"},{"location":"class-reference/","title":"Class Reference","text":"<p>This page contains the syntex &amp; patameter requirements for each function/method of the package.</p>"},{"location":"class-reference/#xts_connect","title":"XTS_Connect","text":""},{"location":"class-reference/#xts_api_client.xts_connect.XTSCommon","title":"<code>XTSCommon</code>","text":"<p>Base variables class</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>class XTSCommon:\n    \"\"\"Base variables class\"\"\"\n    def __init__(self, token=None, userID=None, isInvestorClient=None):\n\n        self.token = token\n        self.userID = userID\n        self.isInvestorClient = isInvestorClient\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect","title":"<code>XTSConnect</code>","text":"<p>               Bases: <code>XTSCommon</code></p> <p>The XTS Connect API wrapper class.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>class XTSConnect(XTSCommon):\n    \"\"\"The XTS Connect API wrapper class.\"\"\"\n    # Constants\n    # Products\n    PRODUCT_MIS = \"MIS\"\n    PRODUCT_NRML = \"NRML\"\n\n    # Order types\n    ORDER_TYPE_MARKET = \"MARKET\"\n    ORDER_TYPE_LIMIT = \"LIMIT\"\n    ORDER_TYPE_STOPMARKET = \"STOPMARKET\"\n    ORDER_TYPE_STOPLIMIT = \"STOPLIMIT\"\n\n    # Transaction type\n    TRANSACTION_TYPE_BUY = \"BUY\"\n    TRANSACTION_TYPE_SELL = \"SELL\"\n\n    # Squareoff mode\n    SQUAREOFF_DAYWISE = \"DayWise\"\n    SQUAREOFF_NETWISE = \"Netwise\"\n\n    # Squareoff position quantity types\n    SQUAREOFFQUANTITY_EXACTQUANTITY = \"ExactQty\"\n    SQUAREOFFQUANTITY_PERCENTAGE = \"Percentage\"\n\n    # Validity\n    VALIDITY_DAY = \"DAY\"\n\n    # Exchange Segments\n    EXCHANGE_NSECM = \"NSECM\"\n    EXCHANGE_NSEFO = \"NSEFO\"\n    EXCHANGE_NSECD = \"NSECD\"\n    EXCHANGE_MCXFO = \"MCXFO\"\n    EXCHANGE_BSECM = \"BSECM\"\n    EXCHANGE_BSEFO = \"BSEFO\"\n\n    # URIs to various calls\n    _routes = {\n        # Interactive API endpoints\n        \"interactive.prefix\": \"interactive\",\n        \"user.login\": \"/interactive/user/session\",\n        \"user.logout\": \"/interactive/user/session\",\n        \"user.profile\": \"/interactive/user/profile\",\n        \"user.balance\": \"/interactive/user/balance\",\n\n        \"orders\": \"/interactive/orders\",\n        \"trades\": \"/interactive/orders/trades\",\n        \"order.status\": \"/interactive/orders\",\n        \"order.place\": \"/interactive/orders\",\n        \"bracketorder.place\": \"/interactive/orders/bracket\",\n\t    \"bracketorder.modify\": \"/interactive/orders/bracket\",\n        \"bracketorder.cancel\": \"/interactive/orders/bracket\",\n        \"order.place.cover\": \"/interactive/orders/cover\",\n        \"order.exit.cover\": \"/interactive/orders/cover\",\n        \"order.modify\": \"/interactive/orders\",\n        \"order.cancel\": \"/interactive/orders\",\n        \"order.cancelall\": \"/interactive/orders/cancelall\",\n        \"order.history\": \"/interactive/orders\",\n\n        \"portfolio.positions\": \"/interactive/portfolio/positions\",\n        \"portfolio.holdings\": \"/interactive/portfolio/holdings\",\n        \"portfolio.positions.convert\": \"/interactive/portfolio/positions/convert\",\n        \"portfolio.squareoff\": \"/interactive/portfolio/squareoff\",\n\t    \"portfolio.dealerpositions\": \"interactive/portfolio/dealerpositions\",\n\t    \"order.dealer.status\": \"/interactive/orders/dealerorderbook\",\n\t    \"dealer.trades\": \"/interactive/orders/dealertradebook\",\n\n        # Market API endpoints\n        \"marketdata.prefix\": \"apimarketdata\",\n        \"market.login\": \"/apimarketdata/auth/login\",\n        \"market.logout\": \"/apimarketdata/auth/logout\",\n\n        \"market.config\": \"/apimarketdata/config/clientConfig\",\n\n        \"market.instruments.master\": \"/apimarketdata/instruments/master\",\n        \"market.instruments.subscription\": \"/apimarketdata/instruments/subscription\",\n        \"market.instruments.unsubscription\": \"/apimarketdata/instruments/subscription\",\n        \"market.instruments.ohlc\": \"/apimarketdata/instruments/ohlc\",\n        \"market.instruments.indexlist\": \"/apimarketdata/instruments/indexlist\",\n        \"market.instruments.quotes\": \"/apimarketdata/instruments/quotes\",\n\n        \"market.search.instrumentsbyid\": '/apimarketdata/search/instrumentsbyid',\n        \"market.search.instrumentsbystring\": '/apimarketdata/search/instruments',\n\n        \"market.instruments.instrument.series\": \"/apimarketdata/instruments/instrument/series\",\n        \"market.instruments.instrument.equitysymbol\": \"/apimarketdata/instruments/instrument/symbol\",\n        \"market.instruments.instrument.futuresymbol\": \"/apimarketdata/instruments/instrument/futureSymbol\",\n        \"market.instruments.instrument.optionsymbol\": \"/apimarketdata/instruments/instrument/optionsymbol\",\n        \"market.instruments.instrument.optiontype\": \"/apimarketdata/instruments/instrument/optionType\",\n        \"market.instruments.instrument.expirydate\": \"/apimarketdata/instruments/instrument/expiryDate\"\n    }\n\n    def __init__(self,\n                 apiKey,\n                 secretKey,\n                 source,\n                 root,\n                 debug=False,\n                 timeout=7,\n                 pool=None,\n                 disable_ssl=False):\n        \"\"\"\n        Initialise a new XTS Connect client instance.\n\n        - `apikey` is the key issued to you\n        - `root` is the API end point root. Unless you explicitly\n        want to send API requests to a non-default endpoint, this\n        can be ignored.\n        - `debug`, if set to True, will serialise and print requests\n        and responses to stdout.\n        - `timeout` is the time (seconds) for which the API client will wait for\n        a request to complete before it fails. Defaults to 7 seconds\n        - `pool` is manages request pools. It takes a dict of params accepted by HTTPAdapter\n        - `disable_ssl` disables the SSL verification while making a request.\n        If set requests won't throw SSLError if its set to custom `root` url without SSL.\n        \"\"\"\n        self.debug = debug\n        self.apiKey = apiKey\n        self.secretKey = secretKey\n        self.source = source\n        self.disable_ssl = disable_ssl\n        self.root = root \n        self.timeout = timeout \n\n        super().__init__()\n\n        # Create requests session only if pool exists. Reuse session\n        # for every request. Otherwise create session for each request\n        if pool:\n            self.reqsession = requests.Session()\n            reqadapter = requests.adapters.HTTPAdapter(**pool)\n            self.reqsession.mount(\"https://\", reqadapter)\n        else:\n            self.reqsession = requests\n\n        # disable requests SSL warning\n        requests.packages.urllib3.disable_warnings()\n\n    def _set_common_variables(self, access_token,userID, isInvestorClient):\n        \"\"\"Set the `access_token` received after a successful authentication.\"\"\"\n        super().__init__(access_token,userID, isInvestorClient)\n\n    def _login_url(self):\n        \"\"\"Get the remote login url to which a user should be redirected to initiate the login flow.\"\"\"\n        return self.root +  \"/user/session\"\n\n    def interactive_login(self):\n        \"\"\"Send the login url to which a user should receive the token.\"\"\"\n        try:\n            params = {\n                \"appKey\": self.apiKey,\n                \"secretKey\": self.secretKey,\n                \"source\": self.source\n            }\n            response = self._post(\"user.login\", params)\n\n            if \"token\" in response['result']:\n                self._set_common_variables(response['result']['token'], response['result']['userID'],\n                                           response['result']['isInvestorClient'])\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_order_book(self, clientID=None):\n        \"\"\"Request Order book gives states of all the orders placed by an user\"\"\"\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get(\"order.status\", params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_dealer_orderbook(self, clientID=None):\n        \"\"\"Request Order book gives states of all the orders placed by an user\"\"\"\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get(\"order.dealer.status\", params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def place_order(self,\n                    exchangeSegment,\n                    exchangeInstrumentID,\n                    productType,\n                    orderType,\n                    orderSide,\n                    timeInForce,\n                    disclosedQuantity,\n                    orderQuantity,\n                    limitPrice,\n                    stopPrice,\n                    orderUniqueIdentifier,\n                    clientID=None\n                    ):\n        \"\"\"To place an order\"\"\"\n        try:\n\n            params = {\n                \"exchangeSegment\": exchangeSegment,\n                \"exchangeInstrumentID\": exchangeInstrumentID,\n                \"productType\": productType,\n                \"orderType\": orderType,\n                \"orderSide\": orderSide,\n                \"timeInForce\": timeInForce,\n                \"disclosedQuantity\": disclosedQuantity,\n                \"orderQuantity\": orderQuantity,\n                \"limitPrice\": limitPrice,\n                \"stopPrice\": stopPrice,\n                \"orderUniqueIdentifier\": orderUniqueIdentifier\n            }\n\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n\n            response = self._post('order.place', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def place_bracketorder(self,\n                    exchangeSegment,\n                    exchangeInstrumentID,\n                    orderType,\n                    orderSide,\n                    disclosedQuantity,\n                    orderQuantity,\n                    limitPrice,\n                    squarOff,\n                    stopLossPrice,\n\t                trailingStoploss,\n                    isProOrder,\n                    orderUniqueIdentifier,\n                     ):\n        \"\"\"To place a bracketorder\"\"\"\n        try:\n\n            params = {\n                \"exchangeSegment\": exchangeSegment,\n                \"exchangeInstrumentID\": exchangeInstrumentID,\n                \"orderType\": orderType,\n                \"orderSide\": orderSide,\n                \"disclosedQuantity\": disclosedQuantity,\n                \"orderQuantity\": orderQuantity,\n                \"limitPrice\": limitPrice,\n                \"squarOff\": squarOff,\n                \"stopLossPrice\": stopLossPrice,\n                \"trailingStoploss\": trailingStoploss,\n                \"isProOrder\": isProOrder,\n             \"orderUniqueIdentifier\": orderUniqueIdentifier\n            }\n            response = self._post('bracketorder.place', json.dumps(params))\n            print(response)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_profile(self, clientID=None):\n        \"\"\"Using session token user can access his profile stored with the broker, it's possible to retrieve it any\n        point of time with the http: //ip:port/interactive/user/profile API. \"\"\"\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n\n            response = self._get('user.profile', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_balance(self, clientID=None):\n        \"\"\"Get Balance API call grouped under this category information related to limits on equities, derivative,\n        upfront margin, available exposure and other RMS related balances available to the user.\"\"\"\n        if self.isInvestorClient:\n            try:\n                params = {}\n                if not self.isInvestorClient:\n                    params['clientID'] = clientID\n                response = self._get('user.balance', params)\n                return response\n            except Exception as e:\n                return response['description']\n        else:\n            print(\"Balance : Balance API available for retail API users only, dealers can watch the same on dealer \"\n                  \"terminal\")\n\n    def modify_order(self,\n                     appOrderID,\n                     modifiedProductType,\n                     modifiedOrderType,\n                     modifiedOrderQuantity,\n                     modifiedDisclosedQuantity,\n                     modifiedLimitPrice,\n                     modifiedStopPrice,\n                     modifiedTimeInForce,\n                     orderUniqueIdentifier,\n                     clientID=None\n                     ):\n        \"\"\"The facility to modify your open orders by allowing you to change limit order to market or vice versa,\n        change Price or Quantity of the limit open order, change disclosed quantity or stop-loss of any\n        open stop loss order. \"\"\"\n        try:\n            appOrderID = int(appOrderID)\n            params = {\n                'appOrderID': appOrderID,\n                'modifiedProductType': modifiedProductType,\n                'modifiedOrderType': modifiedOrderType,\n                'modifiedOrderQuantity': modifiedOrderQuantity,\n                'modifiedDisclosedQuantity': modifiedDisclosedQuantity,\n                'modifiedLimitPrice': modifiedLimitPrice,\n                'modifiedStopPrice': modifiedStopPrice,\n                'modifiedTimeInForce': modifiedTimeInForce,\n                'orderUniqueIdentifier': orderUniqueIdentifier\n            }\n\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n\n            response = self._put('order.modify', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_trade(self, clientID=None):\n        \"\"\"Trade book returns a list of all trades executed on a particular day , that were placed by the user . The\n        trade book will display all filled and partially filled orders. \"\"\"\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get('trades', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_dealer_tradebook(self, clientID=None):\n        \"\"\"Trade book returns a list of all trades executed on a particular day , that were placed by the user . The\n        trade book will display all filled and partially filled orders. \"\"\"\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get('dealer.trades', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_holding(self, clientID=None):\n        \"\"\"Holdings API call enable users to check their long term holdings with the broker.\"\"\"\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n\n            response = self._get('portfolio.holdings', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def bracketorder_cancel(self, appOrderID, clientID=None):\n        \"\"\"This API can be called to cancel any open order of the user by providing correct appOrderID matching with\n        the chosen open order to cancel. \"\"\"\n        try:\n            params = {'boEntryOrderId': int(appOrderID)}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._delete('bracketorder.cancel', params)\n            return response\n        except Exception as e:\n            return response['description']   \n\n    def get_dealerposition_netwise(self, clientID=None):\n        \"\"\"The positions API positions by net. Net is the actual, current net position portfolio.\"\"\"\n        try:\n            params = {'dayOrNet': 'NetWise'}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get('portfolio.dealerpositions', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n\n\n    def get_dealerposition_daywise(self, clientID=None):\n        \"\"\"The positions API returns positions by day, which is a snapshot of the buying and selling activity for\n        that particular day.\"\"\"\n        try:\n            params = {'dayOrNet': 'DayWise'}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n\n            response = self._get('portfolio.dealerpositions', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_position_daywise(self, clientID=None):\n\n        \"\"\"The positions API returns positions by day, which is a snapshot of the buying and selling activity for\n        that particular day.\"\"\"\n        try:\n            params = {'dayOrNet': 'DayWise'}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n\n            response = self._get('portfolio.positions', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_position_netwise(self, clientID=None):\n        \"\"\"The positions API positions by net. Net is the actual, current net position portfolio.\"\"\"\n        try:\n            params = {'dayOrNet': 'NetWise'}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get('portfolio.positions', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def convert_position(self, exchangeSegment, exchangeInstrumentID, targetQty, isDayWise, oldProductType,\n                         newProductType, clientID=None):\n        \"\"\"Convert position API, enable users to convert their open positions from NRML intra-day to Short term MIS or\n        vice versa, provided that there is sufficient margin or funds in the account to effect such conversion \"\"\"\n        try:\n            params = {\n                'exchangeSegment': exchangeSegment,\n                'exchangeInstrumentID': exchangeInstrumentID,\n                'targetQty': targetQty,\n                'isDayWise': isDayWise,\n                'oldProductType': oldProductType,\n                'newProductType': newProductType\n            }\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._put('portfolio.positions.convert', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def cancel_order(self, appOrderID, orderUniqueIdentifier, clientID=None):\n        \"\"\"This API can be called to cancel any open order of the user by providing correct appOrderID matching with\n        the chosen open order to cancel. \"\"\"\n        try:\n            params = {'appOrderID': int(appOrderID), 'orderUniqueIdentifier': orderUniqueIdentifier}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._delete('order.cancel', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def cancelall_order(self, exchangeSegment, exchangeInstrumentID):\n        \"\"\"This API can be called to cancel all open order of the user by providing exchange segment and exchange instrument ID \"\"\"\n        try:\n            params = {\"exchangeSegment\": exchangeSegment, \"exchangeInstrumentID\": exchangeInstrumentID}\n            if not self.isInvestorClient:\n                params['clientID'] = self.userID\n            response = self._post('order.cancelall', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']    \n\n    def place_cover_order(self, exchangeSegment, exchangeInstrumentID, orderSide,orderType, orderQuantity, disclosedQuantity,\n                          limitPrice, stopPrice, orderUniqueIdentifier, clientID=None):\n        \"\"\"A Cover Order is an advance intraday order that is accompanied by a compulsory Stop Loss Order. This helps\n        users to minimize their losses by safeguarding themselves from unexpected market movements. A Cover Order\n        offers high leverage and is available in Equity Cash, Equity F&amp;O, Commodity F&amp;O and Currency F&amp;O segments. It\n        has 2 orders embedded in itself, they are Limit/Market Order Stop Loss Order \"\"\"\n        try:\n\n            params = {'exchangeSegment': exchangeSegment, 'exchangeInstrumentID': exchangeInstrumentID,\n                      'orderSide': orderSide, \"orderType\": orderType,'orderQuantity': orderQuantity, 'disclosedQuantity': disclosedQuantity,\n                      'limitPrice': limitPrice, 'stopPrice': stopPrice, 'orderUniqueIdentifier': orderUniqueIdentifier}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._post('order.place.cover', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def exit_cover_order(self, appOrderID, clientID=None):\n        \"\"\"Exit Cover API is a functionality to enable user to easily exit an open stoploss order by converting it\n        into Exit order. \"\"\"\n        try:\n\n            params = {'appOrderID': appOrderID}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._put('order.exit.cover', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def squareoff_position(self, exchangeSegment, exchangeInstrumentID, productType, squareoffMode,\n                           positionSquareOffQuantityType, squareOffQtyValue, blockOrderSending, cancelOrders,\n                           clientID=None):\n        \"\"\"User can request square off to close all his positions in Equities, Futures and Option. Users are advised\n        to use this request with caution if one has short term holdings. \"\"\"\n        try:\n\n            params = {'exchangeSegment': exchangeSegment, 'exchangeInstrumentID': exchangeInstrumentID,\n                      'productType': productType, 'squareoffMode': squareoffMode,\n                      'positionSquareOffQuantityType': positionSquareOffQuantityType,\n                      'squareOffQtyValue': squareOffQtyValue, 'blockOrderSending': blockOrderSending,\n                      'cancelOrders': cancelOrders\n                      }\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._put('portfolio.squareoff', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_order_history(self, appOrderID, clientID=None):\n        \"\"\"Order history will provide particular order trail chain. This indicate the particular order &amp; its state\n        changes. i.e.Pending New to New, New to PartiallyFilled, PartiallyFilled, PartiallyFilled &amp; PartiallyFilled\n        to Filled etc \"\"\"\n        try:\n            params = {'appOrderID': appOrderID}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get('order.history', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def interactive_logout(self, clientID=None):\n        \"\"\"This call invalidates the session token and destroys the API session. After this, the user should go\n        through login flow again and extract session token from login response before further activities. \"\"\"\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._delete('user.logout', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    ########################################################################################################\n    # Market data API\n    ########################################################################################################\n\n    def marketdata_login(self):\n        \"\"\"Send the login url to which a user should receive the token.\"\"\"\n        try:\n            params = {\n                \"appKey\": self.apiKey,\n                \"secretKey\": self.secretKey,\n                \"source\": self.source\n            }\n            response = self._post(\"market.login\", params)\n\n            if \"token\" in response['result']:\n                self._set_common_variables(response['result']['token'], response['result']['userID'],False)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_config(self):\n        \"\"\"Get the configuration of the client.\"\"\"\n        try:\n            params = {}\n            response = self._get('market.config', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_quote(self, Instruments, xtsMessageCode, publishFormat):\n        \"\"\"Get the quote of the instrument.\"\"\"\n        try:\n\n            params = {'instruments': Instruments, 'xtsMessageCode': xtsMessageCode, 'publishFormat': publishFormat}\n            response = self._post('market.instruments.quotes', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def send_subscription(self, Instruments, xtsMessageCode):\n        \"\"\"Send subscription for the instrument.\"\"\"\n        try:\n            params = {'instruments': Instruments, 'xtsMessageCode': xtsMessageCode}\n            response = self._post('market.instruments.subscription', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def send_unsubscription(self, Instruments, xtsMessageCode):\n        \"\"\"Send unsubscription for the instrument.\"\"\"\n        try:\n            params = {'instruments': Instruments, 'xtsMessageCode': xtsMessageCode}\n            response = self._put('market.instruments.unsubscription', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_master(self, exchangeSegmentList):\n        \"\"\"Get the master string.\"\"\"\n        try:\n            params = {\"exchangeSegmentList\": exchangeSegmentList}\n            response = self._post('market.instruments.master', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_ohlc(self, exchangeSegment, exchangeInstrumentID, startTime, endTime, compressionValue):\n        \"\"\"Get the OHLC of the instrument.\"\"\"\n        try:\n            params = {\n                'exchangeSegment': exchangeSegment,\n                'exchangeInstrumentID': exchangeInstrumentID,\n                'startTime': startTime,\n                'endTime': endTime,\n                'compressionValue': compressionValue}\n            response = self._get('market.instruments.ohlc', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_series(self, exchangeSegment):\n        \"\"\" Get the series of the exchange segment.\"\"\"\n        try:\n            params = {'exchangeSegment': exchangeSegment}\n            response = self._get('market.instruments.instrument.series', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_equity_symbol(self, exchangeSegment, series, symbol):\n        \"\"\" Get the equity symbol of the exchange segment.\"\"\"\n        try:\n\n            params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol}\n            response = self._get('market.instruments.instrument.equitysymbol', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_expiry_date(self, exchangeSegment, series, symbol):\n        \"\"\" Get the expiry date of the exchange segment.\"\"\"\n        try:\n            params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol}\n            response = self._get('market.instruments.instrument.expirydate', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_future_symbol(self, exchangeSegment, series, symbol, expiryDate):\n        \"\"\" Get the future symbol of the exchange segment.\"\"\"\n        try:\n            params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol, 'expiryDate': expiryDate}\n            response = self._get('market.instruments.instrument.futuresymbol', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_option_symbol(self, exchangeSegment, series, symbol, expiryDate, optionType, strikePrice):\n        \"\"\" Get the option symbol of the exchange segment.\"\"\"\n        try:\n            params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol, 'expiryDate': expiryDate,\n                      'optionType': optionType, 'strikePrice': strikePrice}\n            response = self._get('market.instruments.instrument.optionsymbol', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_option_type(self, exchangeSegment, series, symbol, expiryDate):\n        \"\"\" Get the option type of the exchange segment.\"\"\"\n        try:\n            params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol, 'expiryDate': expiryDate}\n            response = self._get('market.instruments.instrument.optiontype', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def get_index_list(self, exchangeSegment):\n        \"\"\" Get the index list of the exchange segment.\"\"\"\n        try:\n            params = {'exchangeSegment': exchangeSegment}\n            response = self._get('market.instruments.indexlist', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def search_by_instrumentid(self, Instruments):\n        \"\"\" Search by instrument id.\"\"\"\n        try:\n            params = {'source': self.source, 'instruments': Instruments}\n            response = self._post('market.search.instrumentsbyid', json.dumps(params))\n            return response\n        except Exception as e:\n            return response['description']\n\n    def search_by_scriptname(self, searchString):\n        \"\"\" Search by script name.\"\"\"\n        try:\n            params = {'searchString': searchString}\n            response = self._get('market.search.instrumentsbystring', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    def marketdata_logout(self):\n        \"\"\"This call invalidates the session token and destroys the API session. After this, the user should go\"\"\"\n        try:\n            params = {}\n            response = self._delete('market.logout', params)\n            return response\n        except Exception as e:\n            return response['description']\n\n    ########################################################################################################\n    # Common Methods\n    ########################################################################################################\n\n    def _get(self, route, params=None):\n        \"\"\"Alias for sending a GET request.\"\"\"\n        return self._request(route, \"GET\", params)\n\n    def _post(self, route, params=None):\n        \"\"\"Alias for sending a POST request.\"\"\"\n        return self._request(route, \"POST\", params)\n\n    def _put(self, route, params=None):\n        \"\"\"Alias for sending a PUT request.\"\"\"\n        return self._request(route, \"PUT\", params)\n\n    def _delete(self, route, params=None):\n        \"\"\"Alias for sending a DELETE request.\"\"\"\n        return self._request(route, \"DELETE\", params)\n\n    def _request(self, route, method, parameters=None):\n        \"\"\"Make an HTTP request.\"\"\"\n        params = parameters if parameters else {}\n\n        # Form a restful URL\n        uri = self._routes[route].format(params)\n        url = urljoin(self.root, uri)\n        headers = {}\n\n        if self.token:\n            # set authorization header\n            headers.update({'Content-Type': 'application/json', 'Authorization': self.token})\n\n        try:\n            r = self.reqsession.request(method,\n                                        url,\n                                        data=params if method in [\"POST\", \"PUT\"] else None,\n                                        params=params if method in [\"GET\", \"DELETE\"] else None,\n                                        headers=headers,\n                                        verify=not self.disable_ssl)\n\n        except Exception as e:\n            raise e\n\n        if self.debug:\n            log.debug(\"Response: {code} {content}\".format(code=r.status_code, content=r.content))\n\n        # Validate the content type.\n        if \"json\" in r.headers[\"content-type\"]:\n            try:\n                data = json.loads(r.content.decode(\"utf8\"))\n            except ValueError:\n                raise ex.XTSDataException(\"Couldn't parse the JSON response received from the server: {content}\".format(\n                    content=r.content))\n\n            # api error\n            if data.get(\"type\"):\n\n                if r.status_code == 400 and data[\"type\"] == \"error\" and data[\"description\"] == \"Invalid Token\":\n                    raise ex.XTSTokenException(data[\"description\"])\n\n                if r.status_code == 400 and data[\"type\"] == \"error\" and data[\"description\"] == \"Bad Request\":\n                    message = \"Description: \" + data[\"description\"] + \" errors: \" + str(data['result'][\"errors\"])\n                    raise ex.XTSInputException(str(message))\n\n            return data\n        else:\n            raise ex.XTSDataException(\"Unknown Content-Type ({content_type}) with response: ({content})\".format(\n                content_type=r.headers[\"content-type\"],\n                content=r.content))\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.__init__","title":"<code>__init__(apiKey, secretKey, source, root, debug=False, timeout=7, pool=None, disable_ssl=False)</code>","text":"<p>Initialise a new XTS Connect client instance.</p> <ul> <li><code>apikey</code> is the key issued to you</li> <li><code>root</code> is the API end point root. Unless you explicitly want to send API requests to a non-default endpoint, this can be ignored.</li> <li><code>debug</code>, if set to True, will serialise and print requests and responses to stdout.</li> <li><code>timeout</code> is the time (seconds) for which the API client will wait for a request to complete before it fails. Defaults to 7 seconds</li> <li><code>pool</code> is manages request pools. It takes a dict of params accepted by HTTPAdapter</li> <li><code>disable_ssl</code> disables the SSL verification while making a request. If set requests won't throw SSLError if its set to custom <code>root</code> url without SSL.</li> </ul> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def __init__(self,\n             apiKey,\n             secretKey,\n             source,\n             root,\n             debug=False,\n             timeout=7,\n             pool=None,\n             disable_ssl=False):\n    \"\"\"\n    Initialise a new XTS Connect client instance.\n\n    - `apikey` is the key issued to you\n    - `root` is the API end point root. Unless you explicitly\n    want to send API requests to a non-default endpoint, this\n    can be ignored.\n    - `debug`, if set to True, will serialise and print requests\n    and responses to stdout.\n    - `timeout` is the time (seconds) for which the API client will wait for\n    a request to complete before it fails. Defaults to 7 seconds\n    - `pool` is manages request pools. It takes a dict of params accepted by HTTPAdapter\n    - `disable_ssl` disables the SSL verification while making a request.\n    If set requests won't throw SSLError if its set to custom `root` url without SSL.\n    \"\"\"\n    self.debug = debug\n    self.apiKey = apiKey\n    self.secretKey = secretKey\n    self.source = source\n    self.disable_ssl = disable_ssl\n    self.root = root \n    self.timeout = timeout \n\n    super().__init__()\n\n    # Create requests session only if pool exists. Reuse session\n    # for every request. Otherwise create session for each request\n    if pool:\n        self.reqsession = requests.Session()\n        reqadapter = requests.adapters.HTTPAdapter(**pool)\n        self.reqsession.mount(\"https://\", reqadapter)\n    else:\n        self.reqsession = requests\n\n    # disable requests SSL warning\n    requests.packages.urllib3.disable_warnings()\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.bracketorder_cancel","title":"<code>bracketorder_cancel(appOrderID, clientID=None)</code>","text":"<p>This API can be called to cancel any open order of the user by providing correct appOrderID matching with the chosen open order to cancel.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def bracketorder_cancel(self, appOrderID, clientID=None):\n    \"\"\"This API can be called to cancel any open order of the user by providing correct appOrderID matching with\n    the chosen open order to cancel. \"\"\"\n    try:\n        params = {'boEntryOrderId': int(appOrderID)}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._delete('bracketorder.cancel', params)\n        return response\n    except Exception as e:\n        return response['description']   \n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.cancel_order","title":"<code>cancel_order(appOrderID, orderUniqueIdentifier, clientID=None)</code>","text":"<p>This API can be called to cancel any open order of the user by providing correct appOrderID matching with the chosen open order to cancel.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def cancel_order(self, appOrderID, orderUniqueIdentifier, clientID=None):\n    \"\"\"This API can be called to cancel any open order of the user by providing correct appOrderID matching with\n    the chosen open order to cancel. \"\"\"\n    try:\n        params = {'appOrderID': int(appOrderID), 'orderUniqueIdentifier': orderUniqueIdentifier}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._delete('order.cancel', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.cancelall_order","title":"<code>cancelall_order(exchangeSegment, exchangeInstrumentID)</code>","text":"<p>This API can be called to cancel all open order of the user by providing exchange segment and exchange instrument ID</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def cancelall_order(self, exchangeSegment, exchangeInstrumentID):\n    \"\"\"This API can be called to cancel all open order of the user by providing exchange segment and exchange instrument ID \"\"\"\n    try:\n        params = {\"exchangeSegment\": exchangeSegment, \"exchangeInstrumentID\": exchangeInstrumentID}\n        if not self.isInvestorClient:\n            params['clientID'] = self.userID\n        response = self._post('order.cancelall', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']    \n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.convert_position","title":"<code>convert_position(exchangeSegment, exchangeInstrumentID, targetQty, isDayWise, oldProductType, newProductType, clientID=None)</code>","text":"<p>Convert position API, enable users to convert their open positions from NRML intra-day to Short term MIS or vice versa, provided that there is sufficient margin or funds in the account to effect such conversion</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def convert_position(self, exchangeSegment, exchangeInstrumentID, targetQty, isDayWise, oldProductType,\n                     newProductType, clientID=None):\n    \"\"\"Convert position API, enable users to convert their open positions from NRML intra-day to Short term MIS or\n    vice versa, provided that there is sufficient margin or funds in the account to effect such conversion \"\"\"\n    try:\n        params = {\n            'exchangeSegment': exchangeSegment,\n            'exchangeInstrumentID': exchangeInstrumentID,\n            'targetQty': targetQty,\n            'isDayWise': isDayWise,\n            'oldProductType': oldProductType,\n            'newProductType': newProductType\n        }\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._put('portfolio.positions.convert', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.exit_cover_order","title":"<code>exit_cover_order(appOrderID, clientID=None)</code>","text":"<p>Exit Cover API is a functionality to enable user to easily exit an open stoploss order by converting it into Exit order.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def exit_cover_order(self, appOrderID, clientID=None):\n    \"\"\"Exit Cover API is a functionality to enable user to easily exit an open stoploss order by converting it\n    into Exit order. \"\"\"\n    try:\n\n        params = {'appOrderID': appOrderID}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._put('order.exit.cover', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_balance","title":"<code>get_balance(clientID=None)</code>","text":"<p>Get Balance API call grouped under this category information related to limits on equities, derivative, upfront margin, available exposure and other RMS related balances available to the user.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_balance(self, clientID=None):\n    \"\"\"Get Balance API call grouped under this category information related to limits on equities, derivative,\n    upfront margin, available exposure and other RMS related balances available to the user.\"\"\"\n    if self.isInvestorClient:\n        try:\n            params = {}\n            if not self.isInvestorClient:\n                params['clientID'] = clientID\n            response = self._get('user.balance', params)\n            return response\n        except Exception as e:\n            return response['description']\n    else:\n        print(\"Balance : Balance API available for retail API users only, dealers can watch the same on dealer \"\n              \"terminal\")\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_config","title":"<code>get_config()</code>","text":"<p>Get the configuration of the client.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_config(self):\n    \"\"\"Get the configuration of the client.\"\"\"\n    try:\n        params = {}\n        response = self._get('market.config', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_dealer_orderbook","title":"<code>get_dealer_orderbook(clientID=None)</code>","text":"<p>Request Order book gives states of all the orders placed by an user</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_dealer_orderbook(self, clientID=None):\n    \"\"\"Request Order book gives states of all the orders placed by an user\"\"\"\n    try:\n        params = {}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._get(\"order.dealer.status\", params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_dealer_tradebook","title":"<code>get_dealer_tradebook(clientID=None)</code>","text":"<p>Trade book returns a list of all trades executed on a particular day , that were placed by the user . The trade book will display all filled and partially filled orders.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_dealer_tradebook(self, clientID=None):\n    \"\"\"Trade book returns a list of all trades executed on a particular day , that were placed by the user . The\n    trade book will display all filled and partially filled orders. \"\"\"\n    try:\n        params = {}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._get('dealer.trades', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_dealerposition_daywise","title":"<code>get_dealerposition_daywise(clientID=None)</code>","text":"<p>The positions API returns positions by day, which is a snapshot of the buying and selling activity for that particular day.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_dealerposition_daywise(self, clientID=None):\n    \"\"\"The positions API returns positions by day, which is a snapshot of the buying and selling activity for\n    that particular day.\"\"\"\n    try:\n        params = {'dayOrNet': 'DayWise'}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n\n        response = self._get('portfolio.dealerpositions', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_dealerposition_netwise","title":"<code>get_dealerposition_netwise(clientID=None)</code>","text":"<p>The positions API positions by net. Net is the actual, current net position portfolio.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_dealerposition_netwise(self, clientID=None):\n    \"\"\"The positions API positions by net. Net is the actual, current net position portfolio.\"\"\"\n    try:\n        params = {'dayOrNet': 'NetWise'}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._get('portfolio.dealerpositions', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_equity_symbol","title":"<code>get_equity_symbol(exchangeSegment, series, symbol)</code>","text":"<p>Get the equity symbol of the exchange segment.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_equity_symbol(self, exchangeSegment, series, symbol):\n    \"\"\" Get the equity symbol of the exchange segment.\"\"\"\n    try:\n\n        params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol}\n        response = self._get('market.instruments.instrument.equitysymbol', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_expiry_date","title":"<code>get_expiry_date(exchangeSegment, series, symbol)</code>","text":"<p>Get the expiry date of the exchange segment.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_expiry_date(self, exchangeSegment, series, symbol):\n    \"\"\" Get the expiry date of the exchange segment.\"\"\"\n    try:\n        params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol}\n        response = self._get('market.instruments.instrument.expirydate', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_future_symbol","title":"<code>get_future_symbol(exchangeSegment, series, symbol, expiryDate)</code>","text":"<p>Get the future symbol of the exchange segment.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_future_symbol(self, exchangeSegment, series, symbol, expiryDate):\n    \"\"\" Get the future symbol of the exchange segment.\"\"\"\n    try:\n        params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol, 'expiryDate': expiryDate}\n        response = self._get('market.instruments.instrument.futuresymbol', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_holding","title":"<code>get_holding(clientID=None)</code>","text":"<p>Holdings API call enable users to check their long term holdings with the broker.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_holding(self, clientID=None):\n    \"\"\"Holdings API call enable users to check their long term holdings with the broker.\"\"\"\n    try:\n        params = {}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n\n        response = self._get('portfolio.holdings', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_index_list","title":"<code>get_index_list(exchangeSegment)</code>","text":"<p>Get the index list of the exchange segment.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_index_list(self, exchangeSegment):\n    \"\"\" Get the index list of the exchange segment.\"\"\"\n    try:\n        params = {'exchangeSegment': exchangeSegment}\n        response = self._get('market.instruments.indexlist', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_master","title":"<code>get_master(exchangeSegmentList)</code>","text":"<p>Get the master string.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_master(self, exchangeSegmentList):\n    \"\"\"Get the master string.\"\"\"\n    try:\n        params = {\"exchangeSegmentList\": exchangeSegmentList}\n        response = self._post('market.instruments.master', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_ohlc","title":"<code>get_ohlc(exchangeSegment, exchangeInstrumentID, startTime, endTime, compressionValue)</code>","text":"<p>Get the OHLC of the instrument.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_ohlc(self, exchangeSegment, exchangeInstrumentID, startTime, endTime, compressionValue):\n    \"\"\"Get the OHLC of the instrument.\"\"\"\n    try:\n        params = {\n            'exchangeSegment': exchangeSegment,\n            'exchangeInstrumentID': exchangeInstrumentID,\n            'startTime': startTime,\n            'endTime': endTime,\n            'compressionValue': compressionValue}\n        response = self._get('market.instruments.ohlc', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_option_symbol","title":"<code>get_option_symbol(exchangeSegment, series, symbol, expiryDate, optionType, strikePrice)</code>","text":"<p>Get the option symbol of the exchange segment.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_option_symbol(self, exchangeSegment, series, symbol, expiryDate, optionType, strikePrice):\n    \"\"\" Get the option symbol of the exchange segment.\"\"\"\n    try:\n        params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol, 'expiryDate': expiryDate,\n                  'optionType': optionType, 'strikePrice': strikePrice}\n        response = self._get('market.instruments.instrument.optionsymbol', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_option_type","title":"<code>get_option_type(exchangeSegment, series, symbol, expiryDate)</code>","text":"<p>Get the option type of the exchange segment.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_option_type(self, exchangeSegment, series, symbol, expiryDate):\n    \"\"\" Get the option type of the exchange segment.\"\"\"\n    try:\n        params = {'exchangeSegment': exchangeSegment, 'series': series, 'symbol': symbol, 'expiryDate': expiryDate}\n        response = self._get('market.instruments.instrument.optiontype', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_order_book","title":"<code>get_order_book(clientID=None)</code>","text":"<p>Request Order book gives states of all the orders placed by an user</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_order_book(self, clientID=None):\n    \"\"\"Request Order book gives states of all the orders placed by an user\"\"\"\n    try:\n        params = {}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._get(\"order.status\", params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_order_history","title":"<code>get_order_history(appOrderID, clientID=None)</code>","text":"<p>Order history will provide particular order trail chain. This indicate the particular order &amp; its state changes. i.e.Pending New to New, New to PartiallyFilled, PartiallyFilled, PartiallyFilled &amp; PartiallyFilled to Filled etc</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_order_history(self, appOrderID, clientID=None):\n    \"\"\"Order history will provide particular order trail chain. This indicate the particular order &amp; its state\n    changes. i.e.Pending New to New, New to PartiallyFilled, PartiallyFilled, PartiallyFilled &amp; PartiallyFilled\n    to Filled etc \"\"\"\n    try:\n        params = {'appOrderID': appOrderID}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._get('order.history', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_position_daywise","title":"<code>get_position_daywise(clientID=None)</code>","text":"<p>The positions API returns positions by day, which is a snapshot of the buying and selling activity for that particular day.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_position_daywise(self, clientID=None):\n\n    \"\"\"The positions API returns positions by day, which is a snapshot of the buying and selling activity for\n    that particular day.\"\"\"\n    try:\n        params = {'dayOrNet': 'DayWise'}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n\n        response = self._get('portfolio.positions', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_position_netwise","title":"<code>get_position_netwise(clientID=None)</code>","text":"<p>The positions API positions by net. Net is the actual, current net position portfolio.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_position_netwise(self, clientID=None):\n    \"\"\"The positions API positions by net. Net is the actual, current net position portfolio.\"\"\"\n    try:\n        params = {'dayOrNet': 'NetWise'}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._get('portfolio.positions', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_profile","title":"<code>get_profile(clientID=None)</code>","text":"<p>Using session token user can access his profile stored with the broker, it's possible to retrieve it any point of time with the http: //ip:port/interactive/user/profile API.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_profile(self, clientID=None):\n    \"\"\"Using session token user can access his profile stored with the broker, it's possible to retrieve it any\n    point of time with the http: //ip:port/interactive/user/profile API. \"\"\"\n    try:\n        params = {}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n\n        response = self._get('user.profile', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_quote","title":"<code>get_quote(Instruments, xtsMessageCode, publishFormat)</code>","text":"<p>Get the quote of the instrument.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_quote(self, Instruments, xtsMessageCode, publishFormat):\n    \"\"\"Get the quote of the instrument.\"\"\"\n    try:\n\n        params = {'instruments': Instruments, 'xtsMessageCode': xtsMessageCode, 'publishFormat': publishFormat}\n        response = self._post('market.instruments.quotes', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_series","title":"<code>get_series(exchangeSegment)</code>","text":"<p>Get the series of the exchange segment.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_series(self, exchangeSegment):\n    \"\"\" Get the series of the exchange segment.\"\"\"\n    try:\n        params = {'exchangeSegment': exchangeSegment}\n        response = self._get('market.instruments.instrument.series', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.get_trade","title":"<code>get_trade(clientID=None)</code>","text":"<p>Trade book returns a list of all trades executed on a particular day , that were placed by the user . The trade book will display all filled and partially filled orders.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def get_trade(self, clientID=None):\n    \"\"\"Trade book returns a list of all trades executed on a particular day , that were placed by the user . The\n    trade book will display all filled and partially filled orders. \"\"\"\n    try:\n        params = {}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._get('trades', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.interactive_login","title":"<code>interactive_login()</code>","text":"<p>Send the login url to which a user should receive the token.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def interactive_login(self):\n    \"\"\"Send the login url to which a user should receive the token.\"\"\"\n    try:\n        params = {\n            \"appKey\": self.apiKey,\n            \"secretKey\": self.secretKey,\n            \"source\": self.source\n        }\n        response = self._post(\"user.login\", params)\n\n        if \"token\" in response['result']:\n            self._set_common_variables(response['result']['token'], response['result']['userID'],\n                                       response['result']['isInvestorClient'])\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.interactive_logout","title":"<code>interactive_logout(clientID=None)</code>","text":"<p>This call invalidates the session token and destroys the API session. After this, the user should go through login flow again and extract session token from login response before further activities.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def interactive_logout(self, clientID=None):\n    \"\"\"This call invalidates the session token and destroys the API session. After this, the user should go\n    through login flow again and extract session token from login response before further activities. \"\"\"\n    try:\n        params = {}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._delete('user.logout', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.marketdata_login","title":"<code>marketdata_login()</code>","text":"<p>Send the login url to which a user should receive the token.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def marketdata_login(self):\n    \"\"\"Send the login url to which a user should receive the token.\"\"\"\n    try:\n        params = {\n            \"appKey\": self.apiKey,\n            \"secretKey\": self.secretKey,\n            \"source\": self.source\n        }\n        response = self._post(\"market.login\", params)\n\n        if \"token\" in response['result']:\n            self._set_common_variables(response['result']['token'], response['result']['userID'],False)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.marketdata_logout","title":"<code>marketdata_logout()</code>","text":"<p>This call invalidates the session token and destroys the API session. After this, the user should go</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def marketdata_logout(self):\n    \"\"\"This call invalidates the session token and destroys the API session. After this, the user should go\"\"\"\n    try:\n        params = {}\n        response = self._delete('market.logout', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.modify_order","title":"<code>modify_order(appOrderID, modifiedProductType, modifiedOrderType, modifiedOrderQuantity, modifiedDisclosedQuantity, modifiedLimitPrice, modifiedStopPrice, modifiedTimeInForce, orderUniqueIdentifier, clientID=None)</code>","text":"<p>The facility to modify your open orders by allowing you to change limit order to market or vice versa, change Price or Quantity of the limit open order, change disclosed quantity or stop-loss of any open stop loss order.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def modify_order(self,\n                 appOrderID,\n                 modifiedProductType,\n                 modifiedOrderType,\n                 modifiedOrderQuantity,\n                 modifiedDisclosedQuantity,\n                 modifiedLimitPrice,\n                 modifiedStopPrice,\n                 modifiedTimeInForce,\n                 orderUniqueIdentifier,\n                 clientID=None\n                 ):\n    \"\"\"The facility to modify your open orders by allowing you to change limit order to market or vice versa,\n    change Price or Quantity of the limit open order, change disclosed quantity or stop-loss of any\n    open stop loss order. \"\"\"\n    try:\n        appOrderID = int(appOrderID)\n        params = {\n            'appOrderID': appOrderID,\n            'modifiedProductType': modifiedProductType,\n            'modifiedOrderType': modifiedOrderType,\n            'modifiedOrderQuantity': modifiedOrderQuantity,\n            'modifiedDisclosedQuantity': modifiedDisclosedQuantity,\n            'modifiedLimitPrice': modifiedLimitPrice,\n            'modifiedStopPrice': modifiedStopPrice,\n            'modifiedTimeInForce': modifiedTimeInForce,\n            'orderUniqueIdentifier': orderUniqueIdentifier\n        }\n\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n\n        response = self._put('order.modify', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.place_bracketorder","title":"<code>place_bracketorder(exchangeSegment, exchangeInstrumentID, orderType, orderSide, disclosedQuantity, orderQuantity, limitPrice, squarOff, stopLossPrice, trailingStoploss, isProOrder, orderUniqueIdentifier)</code>","text":"<p>To place a bracketorder</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>    def place_bracketorder(self,\n                    exchangeSegment,\n                    exchangeInstrumentID,\n                    orderType,\n                    orderSide,\n                    disclosedQuantity,\n                    orderQuantity,\n                    limitPrice,\n                    squarOff,\n                    stopLossPrice,\n\t                trailingStoploss,\n                    isProOrder,\n                    orderUniqueIdentifier,\n                     ):\n        \"\"\"To place a bracketorder\"\"\"\n        try:\n\n            params = {\n                \"exchangeSegment\": exchangeSegment,\n                \"exchangeInstrumentID\": exchangeInstrumentID,\n                \"orderType\": orderType,\n                \"orderSide\": orderSide,\n                \"disclosedQuantity\": disclosedQuantity,\n                \"orderQuantity\": orderQuantity,\n                \"limitPrice\": limitPrice,\n                \"squarOff\": squarOff,\n                \"stopLossPrice\": stopLossPrice,\n                \"trailingStoploss\": trailingStoploss,\n                \"isProOrder\": isProOrder,\n             \"orderUniqueIdentifier\": orderUniqueIdentifier\n            }\n            response = self._post('bracketorder.place', json.dumps(params))\n            print(response)\n            return response\n        except Exception as e:\n            return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.place_cover_order","title":"<code>place_cover_order(exchangeSegment, exchangeInstrumentID, orderSide, orderType, orderQuantity, disclosedQuantity, limitPrice, stopPrice, orderUniqueIdentifier, clientID=None)</code>","text":"<p>A Cover Order is an advance intraday order that is accompanied by a compulsory Stop Loss Order. This helps users to minimize their losses by safeguarding themselves from unexpected market movements. A Cover Order offers high leverage and is available in Equity Cash, Equity F&amp;O, Commodity F&amp;O and Currency F&amp;O segments. It has 2 orders embedded in itself, they are Limit/Market Order Stop Loss Order</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def place_cover_order(self, exchangeSegment, exchangeInstrumentID, orderSide,orderType, orderQuantity, disclosedQuantity,\n                      limitPrice, stopPrice, orderUniqueIdentifier, clientID=None):\n    \"\"\"A Cover Order is an advance intraday order that is accompanied by a compulsory Stop Loss Order. This helps\n    users to minimize their losses by safeguarding themselves from unexpected market movements. A Cover Order\n    offers high leverage and is available in Equity Cash, Equity F&amp;O, Commodity F&amp;O and Currency F&amp;O segments. It\n    has 2 orders embedded in itself, they are Limit/Market Order Stop Loss Order \"\"\"\n    try:\n\n        params = {'exchangeSegment': exchangeSegment, 'exchangeInstrumentID': exchangeInstrumentID,\n                  'orderSide': orderSide, \"orderType\": orderType,'orderQuantity': orderQuantity, 'disclosedQuantity': disclosedQuantity,\n                  'limitPrice': limitPrice, 'stopPrice': stopPrice, 'orderUniqueIdentifier': orderUniqueIdentifier}\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._post('order.place.cover', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.place_order","title":"<code>place_order(exchangeSegment, exchangeInstrumentID, productType, orderType, orderSide, timeInForce, disclosedQuantity, orderQuantity, limitPrice, stopPrice, orderUniqueIdentifier, clientID=None)</code>","text":"<p>To place an order</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def place_order(self,\n                exchangeSegment,\n                exchangeInstrumentID,\n                productType,\n                orderType,\n                orderSide,\n                timeInForce,\n                disclosedQuantity,\n                orderQuantity,\n                limitPrice,\n                stopPrice,\n                orderUniqueIdentifier,\n                clientID=None\n                ):\n    \"\"\"To place an order\"\"\"\n    try:\n\n        params = {\n            \"exchangeSegment\": exchangeSegment,\n            \"exchangeInstrumentID\": exchangeInstrumentID,\n            \"productType\": productType,\n            \"orderType\": orderType,\n            \"orderSide\": orderSide,\n            \"timeInForce\": timeInForce,\n            \"disclosedQuantity\": disclosedQuantity,\n            \"orderQuantity\": orderQuantity,\n            \"limitPrice\": limitPrice,\n            \"stopPrice\": stopPrice,\n            \"orderUniqueIdentifier\": orderUniqueIdentifier\n        }\n\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n\n        response = self._post('order.place', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.search_by_instrumentid","title":"<code>search_by_instrumentid(Instruments)</code>","text":"<p>Search by instrument id.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def search_by_instrumentid(self, Instruments):\n    \"\"\" Search by instrument id.\"\"\"\n    try:\n        params = {'source': self.source, 'instruments': Instruments}\n        response = self._post('market.search.instrumentsbyid', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.search_by_scriptname","title":"<code>search_by_scriptname(searchString)</code>","text":"<p>Search by script name.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def search_by_scriptname(self, searchString):\n    \"\"\" Search by script name.\"\"\"\n    try:\n        params = {'searchString': searchString}\n        response = self._get('market.search.instrumentsbystring', params)\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.send_subscription","title":"<code>send_subscription(Instruments, xtsMessageCode)</code>","text":"<p>Send subscription for the instrument.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def send_subscription(self, Instruments, xtsMessageCode):\n    \"\"\"Send subscription for the instrument.\"\"\"\n    try:\n        params = {'instruments': Instruments, 'xtsMessageCode': xtsMessageCode}\n        response = self._post('market.instruments.subscription', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.send_unsubscription","title":"<code>send_unsubscription(Instruments, xtsMessageCode)</code>","text":"<p>Send unsubscription for the instrument.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def send_unsubscription(self, Instruments, xtsMessageCode):\n    \"\"\"Send unsubscription for the instrument.\"\"\"\n    try:\n        params = {'instruments': Instruments, 'xtsMessageCode': xtsMessageCode}\n        response = self._put('market.instruments.unsubscription', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#xts_api_client.xts_connect.XTSConnect.squareoff_position","title":"<code>squareoff_position(exchangeSegment, exchangeInstrumentID, productType, squareoffMode, positionSquareOffQuantityType, squareOffQtyValue, blockOrderSending, cancelOrders, clientID=None)</code>","text":"<p>User can request square off to close all his positions in Equities, Futures and Option. Users are advised to use this request with caution if one has short term holdings.</p> Source code in <code>src\\xts_api_client\\xts_connect.py</code> <pre><code>def squareoff_position(self, exchangeSegment, exchangeInstrumentID, productType, squareoffMode,\n                       positionSquareOffQuantityType, squareOffQtyValue, blockOrderSending, cancelOrders,\n                       clientID=None):\n    \"\"\"User can request square off to close all his positions in Equities, Futures and Option. Users are advised\n    to use this request with caution if one has short term holdings. \"\"\"\n    try:\n\n        params = {'exchangeSegment': exchangeSegment, 'exchangeInstrumentID': exchangeInstrumentID,\n                  'productType': productType, 'squareoffMode': squareoffMode,\n                  'positionSquareOffQuantityType': positionSquareOffQuantityType,\n                  'squareOffQtyValue': squareOffQtyValue, 'blockOrderSending': blockOrderSending,\n                  'cancelOrders': cancelOrders\n                  }\n        if not self.isInvestorClient:\n            params['clientID'] = clientID\n        response = self._put('portfolio.squareoff', json.dumps(params))\n        return response\n    except Exception as e:\n        return response['description']\n</code></pre>"},{"location":"class-reference/#interactive_socket_client","title":"interactive_socket_client","text":""},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient","title":"<code>InteractiveSocketClient</code>","text":"<p>               Bases: <code>Protocol</code></p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>class InteractiveSocketClient(Protocol):\n    async def on_connect(self):\n        \"\"\"Connect from the socket\"\"\"\n        ...\n\n    async def on_message(self):\n        \"\"\"On message from socket\"\"\"\n        ...\n\n    async def on_joined(self, data):\n        \"\"\"On socket joined\"\"\"\n        ...\n\n    async def on_error(self, data):\n        \"\"\"On receiving error from socket\"\"\"\n        ...\n\n    async def on_order(self, data):\n        \"\"\"On receiving order placed data from socket\"\"\"\n        ...\n\n    async def on_trade(self, data):\n        \"\"\"On receiving trade data from socket\"\"\"\n        ...\n\n    async def on_position(self, data):\n        \"\"\"On receiving position data from socket\"\"\"\n        ...\n\n    async def on_tradeconversion(self, data):\n        \"\"\"On receiving trade conversion data from socket\"\"\"\n        ...\n\n    async def on_messagelogout(self, data):\n        \"\"\"On receiving user logout message\"\"\"\n        ...\n\n    async def on_disconnect(self):\n        \"\"\"On receiving disconnection from socket\"\"\"\n        ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_connect","title":"<code>on_connect()</code>  <code>async</code>","text":"<p>Connect from the socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_connect(self):\n    \"\"\"Connect from the socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_disconnect","title":"<code>on_disconnect()</code>  <code>async</code>","text":"<p>On receiving disconnection from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_disconnect(self):\n    \"\"\"On receiving disconnection from socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_error","title":"<code>on_error(data)</code>  <code>async</code>","text":"<p>On receiving error from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_error(self, data):\n    \"\"\"On receiving error from socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_joined","title":"<code>on_joined(data)</code>  <code>async</code>","text":"<p>On socket joined</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_joined(self, data):\n    \"\"\"On socket joined\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_message","title":"<code>on_message()</code>  <code>async</code>","text":"<p>On message from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_message(self):\n    \"\"\"On message from socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_messagelogout","title":"<code>on_messagelogout(data)</code>  <code>async</code>","text":"<p>On receiving user logout message</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_messagelogout(self, data):\n    \"\"\"On receiving user logout message\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_order","title":"<code>on_order(data)</code>  <code>async</code>","text":"<p>On receiving order placed data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_order(self, data):\n    \"\"\"On receiving order placed data from socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_position","title":"<code>on_position(data)</code>  <code>async</code>","text":"<p>On receiving position data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_position(self, data):\n    \"\"\"On receiving position data from socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_trade","title":"<code>on_trade(data)</code>  <code>async</code>","text":"<p>On receiving trade data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_trade(self, data):\n    \"\"\"On receiving trade data from socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket_client.InteractiveSocketClient.on_tradeconversion","title":"<code>on_tradeconversion(data)</code>  <code>async</code>","text":"<p>On receiving trade conversion data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket_client.py</code> <pre><code>async def on_tradeconversion(self, data):\n    \"\"\"On receiving trade conversion data from socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#interactive_socket","title":"interactive_socket","text":""},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io","title":"<code>OrderSocket_io</code>","text":"<p>               Bases: <code>AsyncClient</code></p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>class OrderSocket_io(socketio.AsyncClient):\n    def __init__(self,\n                 token,\n                 userID,\n                 root_url,\n                 interativeSocketClient : InteractiveSocketClient,\n                 reconnection=True,\n                 reconnection_attempts=0,\n                 reconnection_delay=1,\n                 reconnection_delay_max=50000,\n                 randomization_factor=0.5,\n                 logger=False,\n                 binary=False,\n                 json=None,\n                 **kwargs):\n\n        super().__init__(\n            reconnection = reconnection,\n            reconnection_attempts = reconnection_attempts,\n            reconnection_delay = reconnection_delay,\n            reconnection_delay_max = reconnection_delay_max,\n            randomization_factor = randomization_factor,\n            logger = logger,\n            binary = binary,\n            json = json,\n            **kwargs)\n\n        self.eventlistener = self\n        self.on('connect', interativeSocketClient.on_connect)\n        self.on('message', interativeSocketClient.on_message)\n        self.on('joined', interativeSocketClient.on_joined)\n        self.on('error', interativeSocketClient.on_error)\n        self.on('order', interativeSocketClient.on_order)\n        self.on('trade', interativeSocketClient.on_trade)\n        self.on('position', interativeSocketClient.on_position)\n        self.on('tradeConversion', interativeSocketClient.on_tradeconversion)\n        self.on('logout', interativeSocketClient.on_messagelogout)\n        self.on('disconnect', interativeSocketClient.on_disconnect)\n\n        self.userID = userID\n        self.token = token\n        self.root_url = root_url\n        self.publishFormat = 'JSON'\n        self.broadcastMode = \"Full\"\n\n        self.connection_url = f\"{self.root_url}/?token={self.token}&amp;userID={self.userID}&amp;apiType=INTERACTIVE\"\n        #self.connection_url = port + self.token + '&amp;userID=' + self.userID + \"&amp;apiType=INTERACTIVE\"\n\n    async def connect(self, headers={}, transports='websocket', namespaces=None, socketio_path='/interactive/socket.io',\n                verify=False):\n        \"\"\"Connected to the socket.\"\"\"\n        self.connect(self.connection_url, headers, transports, namespaces, socketio_path)\n\n\n    async def get_emitter(self):\n        \"\"\"For getting event listener\"\"\"\n        return self.eventlistener\n\n    async def on_message(self,xts_message):\n        \"\"\"On message from socket\"\"\"\n        on_message = json.loads(xts_message)\n        return on_message\n\n    async def on_joined(self,xts_message):\n        \"\"\"On socket joined\"\"\"\n        on_joined = json.loads(xts_message)\n        return on_joined\n\n    async def on_error(self,xts_message):\n        \"\"\"On receiving error from socket\"\"\"\n        on_error = json.loads(xts_message)\n        return on_error\n\n    async def on_order(self,xts_message):\n        \"\"\"On receiving order placed data from socket\"\"\"\n        on_order = json.loads(xts_message)\n        return on_order\n\n    async def on_trade(self,xts_message):\n        \"\"\"On receiving trade data from socket\"\"\"\n        on_trade = json.loads(xts_message)\n        return on_trade\n\n    async def on_position(self,xts_message):\n        \"\"\"On receiving position data from socket\"\"\"\n        on_position = json.loads(xts_message)\n        return on_position\n\n    async def on_tradeconversion(self,xts_message):\n        \"\"\"On receiving trade conversion data from socket\"\"\"\n        on_tradeconversion = json.loads(xts_message)\n        return on_tradeconversion\n\n    async def on_messagelogout(self,xts_message):\n        \"\"\"On receiving user logout message\"\"\"\n        on_messagelogout = json.loads(xts_message)\n        return on_messagelogout\n\n    async def on_disconnect(xts_message):\n        \"\"\"On receiving disconnection from socket\"\"\"\n        on_disconnect = json.loads(xts_message)\n        return on_disconnect\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.connect","title":"<code>connect(headers={}, transports='websocket', namespaces=None, socketio_path='/interactive/socket.io', verify=False)</code>  <code>async</code>","text":"<p>Connected to the socket.</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def connect(self, headers={}, transports='websocket', namespaces=None, socketio_path='/interactive/socket.io',\n            verify=False):\n    \"\"\"Connected to the socket.\"\"\"\n    self.connect(self.connection_url, headers, transports, namespaces, socketio_path)\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.get_emitter","title":"<code>get_emitter()</code>  <code>async</code>","text":"<p>For getting event listener</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def get_emitter(self):\n    \"\"\"For getting event listener\"\"\"\n    return self.eventlistener\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_disconnect","title":"<code>on_disconnect(xts_message)</code>  <code>async</code>","text":"<p>On receiving disconnection from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_disconnect(xts_message):\n    \"\"\"On receiving disconnection from socket\"\"\"\n    on_disconnect = json.loads(xts_message)\n    return on_disconnect\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_error","title":"<code>on_error(xts_message)</code>  <code>async</code>","text":"<p>On receiving error from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_error(self,xts_message):\n    \"\"\"On receiving error from socket\"\"\"\n    on_error = json.loads(xts_message)\n    return on_error\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_joined","title":"<code>on_joined(xts_message)</code>  <code>async</code>","text":"<p>On socket joined</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_joined(self,xts_message):\n    \"\"\"On socket joined\"\"\"\n    on_joined = json.loads(xts_message)\n    return on_joined\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_message","title":"<code>on_message(xts_message)</code>  <code>async</code>","text":"<p>On message from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_message(self,xts_message):\n    \"\"\"On message from socket\"\"\"\n    on_message = json.loads(xts_message)\n    return on_message\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_messagelogout","title":"<code>on_messagelogout(xts_message)</code>  <code>async</code>","text":"<p>On receiving user logout message</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_messagelogout(self,xts_message):\n    \"\"\"On receiving user logout message\"\"\"\n    on_messagelogout = json.loads(xts_message)\n    return on_messagelogout\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_order","title":"<code>on_order(xts_message)</code>  <code>async</code>","text":"<p>On receiving order placed data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_order(self,xts_message):\n    \"\"\"On receiving order placed data from socket\"\"\"\n    on_order = json.loads(xts_message)\n    return on_order\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_position","title":"<code>on_position(xts_message)</code>  <code>async</code>","text":"<p>On receiving position data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_position(self,xts_message):\n    \"\"\"On receiving position data from socket\"\"\"\n    on_position = json.loads(xts_message)\n    return on_position\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_trade","title":"<code>on_trade(xts_message)</code>  <code>async</code>","text":"<p>On receiving trade data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_trade(self,xts_message):\n    \"\"\"On receiving trade data from socket\"\"\"\n    on_trade = json.loads(xts_message)\n    return on_trade\n</code></pre>"},{"location":"class-reference/#xts_api_client.interactive_socket.OrderSocket_io.on_tradeconversion","title":"<code>on_tradeconversion(xts_message)</code>  <code>async</code>","text":"<p>On receiving trade conversion data from socket</p> Source code in <code>src\\xts_api_client\\interactive_socket.py</code> <pre><code>async def on_tradeconversion(self,xts_message):\n    \"\"\"On receiving trade conversion data from socket\"\"\"\n    on_tradeconversion = json.loads(xts_message)\n    return on_tradeconversion\n</code></pre>"},{"location":"class-reference/#market_data_socket_client","title":"market_data_socket_client","text":""},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient","title":"<code>MarketDataSocketClient</code>","text":"<p>               Bases: <code>Protocol</code></p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>class MarketDataSocketClient(Protocol):\n    async def on_connect(self):\n        \"\"\"Connect from the socket.\"\"\"\n        ...\n\n    async def on_message(self, data):\n        \"\"\"On receiving message\"\"\"\n        ...\n\n    async def on_event_market_data_full(self, data):\n        \"\"\"On receiving message code 1502:Market Data full\"\"\"\n        ...\n\n    async def on_event_market_status_full(self, data):\n        \"\"\"On receiving message code 1507:Market Status full\"\"\"\n        ...\n\n    async def on_event_last_traded_price_full(self, data):\n        \"\"\"On receiving message code 1512:LTP full\"\"\"\n        ...\n\n    async def on_event_candle_data_full(self, data):\n        \"\"\"On receiving message code 1505:Candle Data full\"\"\"\n        ...\n\n    async def on_event_openinterest_full(self, data):\n        \"\"\"On receiving message code 1510:OpenInterest full\"\"\"\n        ...\n\n    async def on_event_touchline_full(self, data):\n        \"\"\"On receiving message code 1501:Touchline full\"\"\"\n        ...\n\n    async def on_event_instrument_change_full(self, data):\n        self.engine_logger.info(f'I received a 1105:Instrument Change Level1, Touchline message: {data}')\n\n    async def on_event_market_data_partial(self, data):\n        \"\"\"On receiving message code 1502:Market Data partial\"\"\"\n        ...\n\n    async def on_event_last_traded_price_partial(self, data):\n        \"\"\"On receiving message code 1512:LTP partial\"\"\"\n        ...\n\n    async def on_event_candle_data_partial(self, data):\n        \"\"\"On receiving message code 1505:Candle Data partial\"\"\"\n        ...\n\n    async def on_event_openinterest_partial(self, data):\n        \"\"\"On receiving message code 1510:OpenInterest partial\"\"\"\n        ...\n\n    async def on_event_touchline_partial(self, data):\n        \"\"\"On receiving message code 1501:Touchline partial\"\"\"\n        ...\n\n    async def on_event_instrument_change_partial(self, data):\n        \"\"\"On receiving message code 1105:Instrument Change partial\"\"\"\n        ...\n\n    async def on_disconnect(self):\n        \"\"\"Disconnected from the socket\"\"\"\n        ...\n\n    async def on_error(self, data):\n        \"\"\"Error from the socket\"\"\"\n        ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_connect","title":"<code>on_connect()</code>  <code>async</code>","text":"<p>Connect from the socket.</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_connect(self):\n    \"\"\"Connect from the socket.\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_disconnect","title":"<code>on_disconnect()</code>  <code>async</code>","text":"<p>Disconnected from the socket</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_disconnect(self):\n    \"\"\"Disconnected from the socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_error","title":"<code>on_error(data)</code>  <code>async</code>","text":"<p>Error from the socket</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_error(self, data):\n    \"\"\"Error from the socket\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_candle_data_full","title":"<code>on_event_candle_data_full(data)</code>  <code>async</code>","text":"<p>On receiving message code 1505:Candle Data full</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_candle_data_full(self, data):\n    \"\"\"On receiving message code 1505:Candle Data full\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_candle_data_partial","title":"<code>on_event_candle_data_partial(data)</code>  <code>async</code>","text":"<p>On receiving message code 1505:Candle Data partial</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_candle_data_partial(self, data):\n    \"\"\"On receiving message code 1505:Candle Data partial\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_instrument_change_partial","title":"<code>on_event_instrument_change_partial(data)</code>  <code>async</code>","text":"<p>On receiving message code 1105:Instrument Change partial</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_instrument_change_partial(self, data):\n    \"\"\"On receiving message code 1105:Instrument Change partial\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_last_traded_price_full","title":"<code>on_event_last_traded_price_full(data)</code>  <code>async</code>","text":"<p>On receiving message code 1512:LTP full</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_last_traded_price_full(self, data):\n    \"\"\"On receiving message code 1512:LTP full\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_last_traded_price_partial","title":"<code>on_event_last_traded_price_partial(data)</code>  <code>async</code>","text":"<p>On receiving message code 1512:LTP partial</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_last_traded_price_partial(self, data):\n    \"\"\"On receiving message code 1512:LTP partial\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_market_data_full","title":"<code>on_event_market_data_full(data)</code>  <code>async</code>","text":"<p>On receiving message code 1502:Market Data full</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_market_data_full(self, data):\n    \"\"\"On receiving message code 1502:Market Data full\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_market_data_partial","title":"<code>on_event_market_data_partial(data)</code>  <code>async</code>","text":"<p>On receiving message code 1502:Market Data partial</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_market_data_partial(self, data):\n    \"\"\"On receiving message code 1502:Market Data partial\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_market_status_full","title":"<code>on_event_market_status_full(data)</code>  <code>async</code>","text":"<p>On receiving message code 1507:Market Status full</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_market_status_full(self, data):\n    \"\"\"On receiving message code 1507:Market Status full\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_openinterest_full","title":"<code>on_event_openinterest_full(data)</code>  <code>async</code>","text":"<p>On receiving message code 1510:OpenInterest full</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_openinterest_full(self, data):\n    \"\"\"On receiving message code 1510:OpenInterest full\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_openinterest_partial","title":"<code>on_event_openinterest_partial(data)</code>  <code>async</code>","text":"<p>On receiving message code 1510:OpenInterest partial</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_openinterest_partial(self, data):\n    \"\"\"On receiving message code 1510:OpenInterest partial\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_touchline_full","title":"<code>on_event_touchline_full(data)</code>  <code>async</code>","text":"<p>On receiving message code 1501:Touchline full</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_touchline_full(self, data):\n    \"\"\"On receiving message code 1501:Touchline full\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_event_touchline_partial","title":"<code>on_event_touchline_partial(data)</code>  <code>async</code>","text":"<p>On receiving message code 1501:Touchline partial</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_event_touchline_partial(self, data):\n    \"\"\"On receiving message code 1501:Touchline partial\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket_client.MarketDataSocketClient.on_message","title":"<code>on_message(data)</code>  <code>async</code>","text":"<p>On receiving message</p> Source code in <code>src\\xts_api_client\\market_data_socket_client.py</code> <pre><code>async def on_message(self, data):\n    \"\"\"On receiving message\"\"\"\n    ...\n</code></pre>"},{"location":"class-reference/#market_data_socket","title":"market_data_socket","text":""},{"location":"class-reference/#xts_api_client.market_data_socket.MDSocket_io","title":"<code>MDSocket_io</code>","text":"<p>               Bases: <code>AsyncClient</code></p> Source code in <code>src\\xts_api_client\\market_data_socket.py</code> <pre><code>class MDSocket_io(socketio.AsyncClient):\n    def __init__(self,\n                 token,\n                 userID,\n                 root_url,\n                 marketdatasocketclient : MarketDataSocketClient,\n                 reconnection=True,\n                 reconnection_attempts=0,\n                 reconnection_delay=1,\n                 reconnection_delay_max=50000,\n                 randomization_factor=0.5,\n                 logger=False,\n                 binary=False,\n                 json=None,\n                 **kwargs):\n\n        super().__init__(\n            reconnection = reconnection,\n            reconnection_attempts = reconnection_attempts,\n            reconnection_delay = reconnection_delay,\n            reconnection_delay_max = reconnection_delay_max,\n            randomization_factor = randomization_factor,\n            logger = logger,\n            #binary = binary, removed because jatin Asked: TODO Investigate\n            json = json,\n            **kwargs)\n\n        self.eventlistener = self\n        self.on('connect', marketdatasocketclient.on_connect)\n        self.on('message', marketdatasocketclient.on_message)\n        self.on('1501:touchline full', marketdatasocketclient.on_event_touchline_full)\n        self.on('1501:touchline partial', marketdatasocketclient.on_event_touchline_partial)\n        self.on('1502:market data full', marketdatasocketclient.on_event_market_data_full)\n        self.on('1502:market data partial', marketdatasocketclient.on_event_market_data_partial)\n        self.on('1505:candle data full', marketdatasocketclient.on_event_candle_data_full)\n        self.on('1505:candle data partial', marketdatasocketclient.on_event_candle_data_partial)\n        self.on('1507:market status full', marketdatasocketclient.on_event_market_status_full)\n        self.on('1510:openinterest full', marketdatasocketclient.on_event_openinterest_full)\n        self.on('1510:openinterest partial', marketdatasocketclient.on_event_openinterest_partial)\n        self.on('1512:last traded price full', marketdatasocketclient.on_event_last_traded_price_full)\n        self.on('1512:last traded price partial', marketdatasocketclient.on_event_last_traded_price_partial)\n        self.on('1105:instrument change full', marketdatasocketclient.on_event_instrument_change_full)\n        self.on('1105:instrument change partial', marketdatasocketclient.on_event_instrument_change_partial)\n        self.on('disconnect', marketdatasocketclient.on_disconnect)\n\n        self.root_url = root_url\n        self.userID = userID\n        self.publishFormat = 'JSON'\n        self.broadcastMode = \"Full\"\n        self.token = token\n\n        self.connection_url = f\"{self.root_url}/?token={self.token}&amp;userID={self.userID}&amp;publishFormat={self.publishFormat}&amp;broadcastMode={self.broadcastMode}\"\n\n    async def connect(self, headers={}, transports='websocket', namespaces=None, socketio_path='/apimarketdata/socket.io',\n                verify=False):\n\n        url = self.connection_url\n        \"\"\"Connected to the socket.\"\"\"\n        await super().connect(url, headers=headers, transports=transports, namespaces=namespaces, socketio_path=socketio_path)\n        \"\"\"Disconnected from the socket.\"\"\"\n\n    async def get_emitter(self):\n        \"\"\"For getting the event listener\"\"\"\n        return self.eventlistener\n\n    async def on_event_touchline_full(self,xts_message):\n        touchline_full = json.loads(xts_message)\n        return touchline_full\n\n    async def on_event_market_data_full(self,xts_message):\n        market_data_full = json.loads(xts_message)\n        return market_data_full\n\n    async def on_event_candle_data_full(self,xts_message):\n        candle_data_full = json.loads(xts_message)\n        return candle_data_full\n\n    async def on_event_market_status_full(self,xts_message):\n        market_status_full = json.loads(xts_message)\n        return market_status_full\n\n    async def on_event_openinterest_full(self,xts_message):\n        openinterest_full = json.loads(xts_message)\n        return openinterest_full\n\n    async def on_event_last_traded_price_full(self,xts_message):\n        last_traded_price_full = json.loads(xts_message)\n        return last_traded_price_full\n\n    async def on_event_instrument_change_full(self,xts_message):\n        instrument_change_full = json.loads(xts_message)\n        return instrument_change_full\n</code></pre>"},{"location":"class-reference/#xts_api_client.market_data_socket.MDSocket_io.get_emitter","title":"<code>get_emitter()</code>  <code>async</code>","text":"<p>For getting the event listener</p> Source code in <code>src\\xts_api_client\\market_data_socket.py</code> <pre><code>async def get_emitter(self):\n    \"\"\"For getting the event listener\"\"\"\n    return self.eventlistener\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<ul> <li>The user should have API Key, API Secret Key &amp; the URL with Port details for using this package.</li> <li>XTS API is a REST based Trading API with Socket IO streaming component. This client makes it easier to consume the data from API into Python.</li> <li>In XTS, there are two types of API, one for trading (interactive sessions) &amp; one for market data.</li> </ul>"},{"location":"getting-started/#trading-api","title":"Trading API","text":"<ul> <li>Trading APIs allows to integrate trading system with XTS Platform for placing orders, monitor your positions, manage your portfolio and much more.</li> </ul>"},{"location":"getting-started/#market-data-api","title":"Market Data API","text":"<ul> <li>Market Data API is a mixed HTTP REST and HTTP streaming API. It provides access to live quotes data on a wide range of symbols.</li> </ul>"},{"location":"getting-started/#steps-to-use-the-package","title":"Steps to use the Package","text":""},{"location":"getting-started/#step-1-instantiate-xts-class-into-object-before-login","title":"Step 1. Instantiate XTS class into object before login.","text":"<ul> <li>Import class 'XTSConnect' &amp; then instantiate it as shown.</li> <li>Write your apikey, secretkey, source &amp; root. Root is the URL with port included.</li> </ul> <pre><code>from xts_api_client.xts_connect import XTSConnect\n\nxt_market_data = XTSConnect(\n    apiKey = market_data_API_key,\n    secretKey = market_data_API_secret,\n    source = API_source,\n    root = API_root\n)\n</code></pre>"},{"location":"getting-started/#step-2-logging-in","title":"Step 2. Logging in.","text":"<ul> <li>As mentioned earlier, there are two types of API in XTS. The below example is for market data API.</li> <li>After instantiating XTSConnect. Use the method marketdata login to log in &amp; access data.</li> </ul> <pre><code>response_marketdata_login = xt_market_data.marketdata_login()\n</code></pre> <p>If the credentials are correct, printing 'response_marketdata_login' will five a JSON like following.</p> <pre><code>{'type': 'success', 'code': 'e-response-0010', 'description': 'Provided Valid Credentials', 'result': {'token': data removed, 'userID': data removed, 'appVersion': data removed, 'application_expiry_date': data removed}}\n</code></pre>"},{"location":"getting-started/#step-3-getting-configuration","title":"Step 3. Getting Configuration.","text":"<ul> <li>Once you have logged in through market_data_API, you can get the configuration for the market data.</li> </ul> <pre><code>market_data_get_config = xt_market_data.get_config()\n</code></pre> <p>Printing the 'market_data_get_config' will give JSON like following.</p> <pre><code>{'type': 'success', 'code': 's-response-0001', 'description': 'Fetched configurations successfully', 'result': __{'exchangeSegments': {'NSECM': 1, 'NSEFO': 2, 'NSECD': 3, 'NSECO': 4, 'SLBM': 5, 'NIFSC': 7, 'BSECM': 11, 'BSEFO': 12, 'BSECD': 13, 'BSECO': 14, 'NCDEX': 21, 'MSECM': 41, 'MSEFO': 42, 'MSECD': 43, 'MCXFO': 51}__, 'xtsMessageCode': {'touchlineEvent': 1501, 'marketDepthEvent': 1502, 'indexDataEvent': 1504, 'candleDataEvent': 1505, 'openInterestEvent': 1510, 'instrumentPropertyChangeEvent': 1105, 'ltpEvent': 1512}, 'publishFormat': ['Binary', 'JSON'], 'broadCastMode': ['Full', 'Partial'], 'instrumentType': {'1': 'Futures', '2': 'Options', '4': 'Spread', '8': 'Equity', '16': 'Spot', '32': 'PreferenceShares', '64': 'Debentures', '128': 'Warrants', \n'256': 'Miscellaneous', '512': 'MutualFund', 'Futures': 1, 'Options': 2, 'Spread': 4, 'Equity': 8, 'Spot': 16, 'PreferenceShares': 32, 'Debentures': 64, 'Warrants': 128, 'Miscellaneous': 256, 'MutualFund': 512}}}\n</code></pre>"},{"location":"getting-started/#step-4-getting-the-master-data","title":"Step 4. Getting the Master Data.","text":"<ul> <li>XTS provides API Call to fetch all tradable as well as some additional Instrument/contract masters in a single structure. </li> <li>This call can be made once in a day and the response can be persisted in local storage or file as per you application design and you can fetch instrumented or Symbols from this dataset throughout the day.</li> <li>The type of master is a dictionary, that contains all the data sepearted by \"|\".</li> <li>The parameter 'exchangeSegmentList' takes a list of exchange segments. In XTS, NSE has few segments as shown in the cofig output above.</li> </ul> <pre><code>market_data_get_master = xt_market_data.get_master(\n    exchangeSegmentList = [xt_market_data.EXCHANGE_NSECM]\n    )\n</code></pre> <ul> <li>Both above &amp; below code will give same result. </li> </ul> <pre><code>market_data_get_master = xt_market_data.get_master(\n      exchangeSegmentList = ['NSECM']\n      )\n</code></pre> <p>A snippet of print of market_data_get_master.</p> <pre><code>...nNSECM|11369|8|TTKHLTCARE|TTKHLTCARE-EQ|EQ|TTKHLTCARE-EQ|1100100011369|1798.7|1199.2|66709|0.05|1|1|TTKHLTCARE|INE910C01018|1|1|TTK HEALTHCARE LIMITED-EQ|0|-1|-1\\nNSECM|20364|8|771KL43|771KL43-SG|SG|771KL43-SG|1100100020364|102.37|92.62|1025599|0.01|100|1|771KL43|IN2020230172|1|1|SDL KL 7.71% 2043-SG|0|-1|-1\\nNSECM|21711|8|68PN26|68PN26-SG|SG|68PN26-SG|1100100021711|108.7|98.35|965899|0.01|100|1|68PN26|IN2820200052|1|1|SDL PN 6.8% 2026-SG|0|-1|-1'}\n</code></pre> <ul> <li>We can make a DataFrame of NSE cash market master data, using the following code snippet.</li> </ul> <pre><code>import pandas as pd\nfrom io import StringIO \n\nmaster_data_nsecm = xt_market_data.get_master(exchangeSegmentList=['NSECM'])\ncol_header = \"ExchangeSegment|ExchangelnstrumentlD|InstrumentType|Name|Description|Series|NameWithSeries|InstrumentlD|PriceBand.High|PriceBand.Low|FreezeQty|TickSize|LotSize|Multiplier|DisplayName|ISIN|PriceNumerator|PriceDenominator|DetailedDescription|ExtendedSurvlndicator|Cautionlndicator|GSMIndicator\".split(\"|\")\nnsecm_master_df = pd.read_csv(StringIO(master_data_nsecm['result']), sep = \"|\", usecols=range(22), low_memory =False,header=None)\nnsecm_master_df.columns = col_header\n</code></pre> <ul> <li>We can make a DataFrame of NSE and BSE; future &amp; options master data, using the following code snippet.</li> </ul> <pre><code>import pandas as pd\nfrom io import StringIO \n\nmaster_data_nsefo = xt_market_data.get_master(exchangeSegmentList=['NSEFO'])\ncol_header = \"ExchangeSegment|ExchangeInstrumentlD|InstrumentType|Name|Description|Series|NameWithSeries|InstrumentID|PriceBand.High|PriceBand.Low|FreezeQty|TickSize|LotSize|Multiplierl|Underlyinglnstrumentld|UnderlyinglndexName|ContractExpiration|StrikePrice|OptionType|DisplayNamel|PriceNumerator|PriceDenominator|DetailedDescription\".split(\"|\")\nnsefo_master_df = pd.read_csv(StringIO(master_data_nsefo['result']), sep = \"|\", usecols=range(23), low_memory =False,header=None)\nnsefo_master_df.columns = col_header\n</code></pre> <pre><code>import pandas as pd\nfrom io import StringIO \n\nmaster_data_bsefo = xt_market_data.get_master(exchangeSegmentList=['BSEFO'])\ncol_header = \"ExchangeSegment|ExchangeInstrumentlD|InstrumentType|Name|Description|Series|NameWithSeries|InstrumentID|PriceBand.High|PriceBand.Low|FreezeQty|TickSize|LotSize|Multiplierl|Underlyinglnstrumentld|UnderlyinglndexName|ContractExpiration|StrikePrice|OptionType|DisplayNamel|PriceNumerator|PriceDenominator|DetailedDescription\".split(\"|\")\nbsefo_master_df = pd.read_csv(StringIO(market_data_BSEFO['result']), sep = \"|\", usecols=range(23), low_memory =False,header=None)\nbsefo_master_df.columns = col_header\n</code></pre>"},{"location":"getting-started/#step-5-getting-the-ohlc-data","title":"Step 5. Getting the OHLC Data.","text":"<ul> <li>The data is available in the form of a candle timestamp with epoch from 1970, Open, High, Low, Close, Volume, OI.</li> <li>The least compression available is 60(1 minute) for both event stream and long polling (GET at 1 Request Per Second).</li> <li>Other supported intervals for GET (long polling ) Request are 2 minute, 3 minutes, 5 minutes, 15 minutes, 30 minutes , hourly and daily.</li> <li>Format of startTime &amp; endTime is \"MMM DD YYYY HHMMSS\". In the example given below 091500 means morning nine fifteen in IST. Market open  time :-) .</li> </ul> <pre><code>marget_data_get_ohlc = xt_market_data.get_ohlc(\n    exchangeSegment = xt_market_data.EXCHANGE_NSECM,\n    exchangeInstrumentID = 22,\n    startTime = \"Dec 02 2024 091500\",\n    endTime = \"Dec 02 2024 093000\",\n    compressionValue = 60)\n</code></pre> <p>Printing market_data_get_ohlc will give a dictionary, as shown below.</p> <pre><code>{'type': 'success', 'code': 's-instrument-0002', 'description': 'Data found', 'result': {'exchangeSegment': 'NSECM', 'exchangeInstrumentID': '22', 'dataReponse': DELETED FOR DATA PRIVACY}}\n</code></pre> <ul> <li>From the DataFrame made above (in master data section), user can select different instruments &amp; can gain further insight.</li> </ul>"},{"location":"helper-function/","title":"Helper Functions/Methods available in package.","text":"<ul> <li>Helper function are written inside the package to serve as an example to end user on how to use the package.</li> </ul>"},{"location":"helper-function/#xts_helper","title":"XTS_Helper","text":""},{"location":"helper-function/#cm_master_string_to_df","title":"cm_master_string_to_df:","text":"<p>Converts the response of cm_master API to a pandas DataFrame. This function takes a string response from the cm_master API, which contains data separated by the '|' character, and converts it into a pandas DataFrame.  The DataFrame will have predefined column headers.</p> <p>Parameters: cm_master_result of string type : The string response from the cm_master API.</p> <p>Returns: pd.DataFrame: A pandas DataFrame containing the parsed data from the cm_master_result string.</p> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n      |DataDrame for Cash Market|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import cm_master_string_to_df\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\n\nmarket_data_get_master = xt_market_data.get_master(\nexchangeSegmentList = [xt_market_data.EXCHANGE_NSECM] # Works for BSECM as well\n)\n\nprint(cm_master_string_to_df(market_data_get_master['result']))\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre>"},{"location":"helper-function/#fo_master_string_to_df","title":"fo_master_string_to_df:","text":"<p>Converts the response of master API to pandas DataFrame for fo segment. This function takes a string response from the fo_master API, splits it into lines, and then categorizes each line into futures or options based on the number of columns. It then converts these categorized lines into pandas DataFrames with appropriate column headers.</p> <p>Parameters: fo_master_result of string type : The string response from the fo_master API.</p> <p>Returns: tuple: A tuple containing two pandas DataFrames:</p> <p>fut_master_df: DataFrame containing futures data.</p> <p>opt_master_df: DataFrame containing options data.</p> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n   |Tuple of DataDrame for FO Market|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import fo_master_string_to_df\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\n\nmarket_data_get_master = xt_market_data.get_master(\n    exchangeSegmentList = [xt_market_data.EXCHANGE_NSEFO] # Works for BSECM as well.\n    )\n\n\"\"\"\nfuture_master_df = fo_master_string_to_df(market_data_get_master['result'])\nprint(future_master_df[0]) # This will give DataFrame for Future.\n\noptions_master_df = fo_master_string_to_df(market_data_get_master['result'])\nprint(options_master_df[1]) # This will give DataFrame for Options.\n\"\"\"\n\nprint(fo_master_string_to_df(market_data_get_master['result'])) \n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre>"},{"location":"helper-function/#cm_master_df_to_xts_cm_instrument_list","title":"cm_master_df_to_xts_cm_instrument_list:","text":"<p>Converts the pandas DataFrame of cm_master API to list of xts_cm_Instrument objects.</p> <p>Parameters: cm_master_df with pd.DataFrame type &amp; series_list_to_include with list type. Example of List [\"EQ\",\"BE\",\"BZ\",\"SM\",\"A\",\"B\"].</p> <p>Returns: list of XTS Cash Market Instruments.</p> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n|List of InstrumentID for Cash Market|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import cm_master_string_to_df, cm_master_df_to_xts_cm_instrument_list\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\n\nmarket_data_get_master = xt_market_data.get_master(\nexchangeSegmentList = [xt_market_data.EXCHANGE_NSECM] # Works for BSE as well.\n)\n#User can swap NSEFO with BSEFO if needed.\ncm_master_df  = cm_master_string_to_df(market_data_get_master['result'])\n\ncm_instrument_list=cm_master_df_to_xts_cm_instrument_list(\n    cm_master_df = cm_master_df,\n    series_list_to_include = [\"EQ\",\"BE\",\"BZ\",\"SM\",\"A\",\"B\"] # \"EQ\",\"BE\",\"BZ\" Are for NSE &amp; \"SM\",\"A\",\"B\" are for BSE.\n)\nprint(cm_instrument_list)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre>"},{"location":"helper-function/#fo_master_df_to_xts_future_instrument_list","title":"fo_master_df_to_xts_future_instrument_list:","text":"<p>Converts the pandas DataFrame of fo_master API to list of xts_future_Instrument objects.</p> <p>Parameters: fo_master_df with pd.DataFrame type &amp; series_list_to_include with list type. Example of List [\"FUTIDX\",\"FUTSTK\",\"IF\"].</p> <p>Returns: list of XTS Futures Instruments.</p> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n|List of Instrument Id for Future Contracts|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import fo_master_string_to_df, fo_master_df_to_xts_future_instrument_list\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\n\nmarket_data_get_master = xt_market_data.get_master(\n    exchangeSegmentList = [xt_market_data.EXCHANGE_NSEFO] # Works for BSE as well.\n    )\n\nfo_master_df = fo_master_string_to_df(market_data_get_master['result'])\n\nfuture_instrument_list = fo_master_df_to_xts_future_instrument_list(fo_master_df[0],\n    series_list_to_include = [\"FUTIDX\",\"FUTSTK\",\"IF\"] # \"FUTIDX\",\"FUTSTK\" are for NSE &amp; \"IF\" is for BSE.\n    )\n\nprint(future_instrument_list)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre>"},{"location":"helper-function/#fo_master_df_to_xts_options_instrument_list","title":"fo_master_df_to_xts_options_instrument_list:","text":"<p>Converts the pandas DataFrame of fo_master API to list of xts_optoins_Instrument objects</p> <p>Parameters: fo_master_df with pd.DataFrame type &amp; series_list_to_include with list type. Example of List : [\"OPTIDX\",\"OPTSTK\",\"IO\"].</p> <p>Returns: list of XTS Options Instruments.</p> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n|List of Instrument Id for Options Contracts|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import fo_master_string_to_df, fo_master_df_to_xts_options_instrument_list\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\n\nmarket_data_get_master = xt_market_data.get_master(\n    exchangeSegmentList = [xt_market_data.EXCHANGE_NSEFO] # Works for BSE as well.\n    )\n#User can swap NSEFO with BSEFO if needed.\n\nfo_master_df = fo_master_string_to_df(market_data_get_master['result'])\n\noptions_instrument_list = fo_master_df_to_xts_options_instrument_list(fo_master_df[1],\n    series_list_to_include = [\"OPTIDX\",\"OPTSTK\",\"IO\"] # \"OPTIDX\",\"OPTSTK\" are for NSE &amp; \"IO\" is for BSE.\n    )\n\nprint(options_instrument_list)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre>"},{"location":"helper-function/#ohlc_to_df","title":"ohlc_to_df:","text":"<p>Converts XTS-API(from XTS.Connect.get_ohlc()) generated OHLC data to pandas DataFrame.</p> <p>Parameters: The return of XTS.Connect.get_ohlc() method with dictionary type. Example of dict : {'type': 'success', 'code': 's-instrument-0002', 'description': 'Data found', 'result': {'exchangeSegment': 'NSECM', 'exchangeInstrumentID': '22', 'dataReponse': 'data removed'}} Returns: A pd.DataFrame from the OHLC values.</p> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n        |OHLC for Cash Market|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import ohlc_to_df\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\n\nmarget_data_get_ohlc = xt_market_data.get_ohlc(\n    exchangeSegment = xt_market_data.EXCHANGE_NSECM, # Also Works for BSECM\n    exchangeInstrumentID = 22, # When using BSECM, Use BSE instrument Id like \"526530\"\n    startTime = \"Dec 02 2024 091500\", #Time in IST\n    endTime = \"Dec 02 2024 133000\", #Time in IST, 24 hour clock.\n    compressionValue = 60) # 60 represents 1 minute. Check Documentation for different values.\n\n# Change the values oh OHLC parameters as required.\n\nohlc_df = ohlc_to_df(marget_data_get_ohlc)\nprint(ohlc_df)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre>"},{"location":"helper-function/#ticker_exchangeinstrumentid_dict","title":"ticker_exchangeInstrumentId_dict:","text":"<p>Converts XTS-API DataFrame (generated from XTS.Connect.get_master() with helper functoin cm_master_string_to_df/fo_master_string_to_df) to a dictionary. So that user can search Instrument Id with ticker symbol.</p> <p>Parameters: The return of cm_master_string_to_df/fo_master_string_to_df methods with the pd.DataFrame type. Returns: A Dictionary conatining Ticker Symbol as keys &amp; Exchange Instrument Id as values. </p> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n|Ticker:ExchangeInstrumentId Dict for Cash Market|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import cm_master_string_to_df\nfrom xts_api_client.helper.helper import ticker_exchangeInstrumentId_dict\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\nmarket_data_get_master = xt_market_data.get_master(exchangeSegmentList = [xt_market_data.EXCHANGE_NSECM]) # Works for BSECM as well.\n\ncm_master_df = cm_master_string_to_df(market_data_get_master['result'])\nticker_exchInstrumentID_dict = ticker_exchangeInstrumentId_dict(cm_master_df)\nprint(ticker_exchInstrumentID_dict.get('RELIANCE')) # Reliance is kept here as an example. User can print \"ticker_exchInstrumentID_dict\" for full data.\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n |Ticker:ExchangeInstrumentId Dict for Future Contracts|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import fo_master_string_to_df\nfrom xts_api_client.helper.helper import ticker_exchangeInstrumentId_dict\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\nmarket_data_get_master = xt_market_data.get_master(exchangeSegmentList = [xt_market_data.EXCHANGE_NSEFO]) # In BSEFO very few items trade. Mostly Indexes.\n\nfuture_master_df = fo_master_string_to_df(market_data_get_master['result'])\nticker_exchInstrumentID_dict = ticker_exchangeInstrumentId_dict(future_master_df[0])\nprint(ticker_exchInstrumentID_dict.get('RELIANCE')) # Reliance is kept here as an example. User can print \"ticker_exchInstrumentID_dict\" for full data.\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre> <pre><code>\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n|Ticker:ExchangeInstrumentId Dict for Options Contracts|\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nfrom xts_api_client.xts_connect import XTSConnect\nfrom xts_api_client.helper.helper import fo_master_string_to_df\nfrom xts_api_client.helper.helper import ticker_exchangeInstrumentId_dict\n\nxt_market_data = XTSConnect(\napiKey = API_key,\nsecretKey = API_secret,\nsource = API_source,\nroot = API_root\n)\nresponse_marketdata_login = xt_market_data.marketdata_login()\nmarket_data_get_master = xt_market_data.get_master(exchangeSegmentList = [xt_market_data.EXCHANGE_NSEFO]) # In BSEFO very few items trade. Mostly Indexes.\n\noptions_master_df = fo_master_string_to_df(market_data_get_master['result'])\nticker_exchInstrumentID_dict = ticker_exchangeInstrumentId_dict(options_master_df[1])\nprint(ticker_exchInstrumentID_dict.get('RELIANCE')) # Reliance is kept here as an example. User can print \"ticker_exchInstrumentID_dict\" for full data.\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n</code></pre>"},{"location":"how-to-guides/","title":"How To Guide for Package","text":""},{"location":"how-to-guides/#native-functionsmethods-available-in-package","title":"Native Functions/Methods available in package.","text":"<ul> <li>Most of these functions are self explanatory in nature. However, a simple explanations is mentioned for them.</li> <li> <p>The Trading API gives the user access to </p> <ul> <li>interactive_login: Send the login url to which a user should receive the token.</li> <li>get_order_book: Request order book gives states of all the orders placed by an user.</li> <li>get_dealer_orderbook: No idea, figure it out yourself!</li> <li>place_order: To place an order.</li> <li>place_bracketorder: To place a bracketorder.</li> <li>get_profile: Using session token user can access his profile stored with the broker.</li> <li>get_balance: Get balance API call grouped under this category information related to limits on equities, derivative, upfront margin, available exposure and other RMS related balances available to the user.</li> <li>modify_order: The facility to modify your open orders by allowing you to change limit order to market or vice versa, change price or quantity of the limit open order, change disclosed quantity or stop-loss of any open stop loss order.</li> <li>get_trade: Trade book returns a list of all trades executed on a particular day, that were placed by the user. The trade book will display all filled and partially filled orders.</li> <li>get_dealer_tradebook: Trade book returns a list of all trades executed on a particular day, that were placed by the user. The trade book will display all filled and partially filled orders.</li> <li>get_holding: Holdings API call enable users to check their long term holdings with the broker.</li> <li>bracketorder_cancel: This API can be called to cancel any open order of the user by providing correct appOrderID matching with the chosen open order to cancel.</li> <li>get_dealerposition_netwise: The positions API positions by net. Net is the actual, current net position portfolio.</li> <li>get_dealerposition_daywise: The positions API returns positions by day, which is a snapshot of the buying and selling activity for that particular day.</li> <li>get_position_daywise: The positions API returns positions by day, which is a snapshot of the buying and selling activity for that particular day.</li> <li>get_position_netwise: The positions API positions by net. Net is the actual, current net position portfolio.</li> <li>convert_position: Convert position API, enable users to convert their open positions from NRML intra-day to Short term MIS or vice versa, provided that there is sufficient margin or funds in the account to effect such conversion.</li> <li>cancel_order: This API can be called to cancel any open order of the user by providing correct appOrderID matching with the chosen open order to cancel.</li> <li>cancelall_order: This API can be called to cancel all open order of the user by providing exchange segment and exchange instrument ID.</li> <li>place_cover_order: A Cover Order is an advance intraday order that is accompanied by a compulsory Stop Loss Order. This helps users to minimize their losses by safeguarding themselves from unexpected market movements. A Cover Order offers high leverage and is available in Equity Cash, Equity F&amp;O, Commodity F&amp;O and Currency F&amp;O segments. It has 2 orders embedded in itself, they are Limit/Market Order Stop Loss Order.</li> <li>exit_cover_order: Exit Cover API is a functionality to enable user to easily exit an open stoploss order by converting it into Exit order.</li> <li>squareoff_position: User can request square off to close all his positions in Equities, Futures and Option. Users are advised to use this request with caution if one has short term holdings.</li> <li>get_order_history: Order history will provide particular order trail chain. This indicate the particular order &amp; its state changes. i.e.Pending New to New, New to PartiallyFilled, PartiallyFilled, PartiallyFilled &amp; PartiallyFilled to Filled etc.</li> <li>interactive_logout: This call invalidates the session token and destroys the API session. After this, the user should go through login flow again and extract session token from login response before further activities.</li> </ul> </li> <li> <p>The Market Data API gives the user access to </p> <ul> <li>marketdata_login: Send the login url to which a user should receive the token.</li> <li>get_config: Get the configuration of the client.</li> <li>get_quote: Get the quote of the instrument.</li> <li>send_subscription: Send subscription for the instrument.</li> <li>send_unsubscription: Send unsubscription for the instrument.</li> <li>get_master: Get the master string.</li> <li>get_ohlc: Get the OHLC of the instrument.</li> <li>get_series: Get the series of the exchange segment.</li> <li>get_equity_symbol: Get the equity symbol of the exchange segment.</li> <li>get_expiry_date: Get the expiry date of the exchange segment.</li> <li>get_future_symbol: Get the future symbol of the exchange segment.</li> <li>get_option_symbol: Get the option symbol of the exchange segment.</li> <li>get_option_type: Get the option type of the exchange segment.</li> <li>get_index_list: Get the index list of the exchange segment.</li> <li>search_by_instrumentid: Search by instrument id.</li> <li>search_by_scriptname: Search by script name.</li> <li>marketdata_logout: This call invalidates the session token and destroys the API session.</li> </ul> </li> </ul>"},{"location":"reference/","title":"Reference","text":"<ul> <li> <p>This is a python client package for XTS API. XTS is product from Symphony Fintech Solutions Pvt. Ltd..The original documentation for XTS Clinet is linked here.</p> </li> <li> <p>This package is a derivative work of the original package written by Symphony Fintech Solutions Pvt. Ltd..</p> </li> <li> <p>Link for original GitHub Repository. It takes inspirations from the original, however it differs in the implimentation.</p> </li> <li> <p>Link to pypiserver for hosting the package locally.</p> </li> </ul>"}]}